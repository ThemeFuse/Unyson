<?php if (!defined('FW')) die('Forbidden');

class FW_Extension_Layout_Builder extends FW_Extension
{
	private $builder_option_key = 'layout-builder';

	private $supports_feature_name = 'fw-layout-builder';

	/**
	 * @internal
	 */
	protected function _init()
	{
		if (is_admin()) {
			$this->add_admin_filters();
			$this->add_admin_actions();
		} else {
			$this->add_theme_filters();
		}
	}

	private function add_admin_filters()
	{
		add_filter('fw_post_options', array($this, '_admin_filter_fw_post_options'), 10, 2);
	}

	private function add_admin_actions()
	{
		add_action('fw_save_post_options', array($this, '_admin_action_fw_save_post_options'), 10, 2);
	}

	private function add_theme_filters()
	{
		add_action('the_content', array($this, '_theme_filter_prevent_autop'), 1);
	}

	/*
	 * Adds the layout builder metabox if the $post_type is supported
	 * @internal
	 */
	public function _admin_filter_fw_post_options($post_options, $post_type)
	{
		if (
			post_type_supports($post_type, $this->supports_feature_name) or
			in_array($post_type, $this->get_config('supported_post_types'))
		) {
			$template = get_post_meta(get_the_ID(), '_wp_page_template', true);
			$page_templates = fw_ext_builder_page_templates('layout-builder');
			
			if($post_type !== 'page' or empty($page_templates) or in_array($template, $page_templates)) {
				$layout_builder_options = array(
					'layout-builder-box' => array(
						'title' => false,
						'type' => 'box',
						'priority' => 'high',
						'options' => array(
							$this->builder_option_key => array(
								'label' => false,
								'desc' => false,
								'type' => 'layout-builder',
								'editor_integration' => true
							)
						)
					)
				);
				$post_options = array_merge($layout_builder_options, $post_options);
			}
		}

		return $post_options;
	}

	/**
	 * @internal
	 */
	public function _admin_action_fw_save_post_options($post_id, $post)
	{
		if (
			post_type_supports($post->post_type, $this->supports_feature_name) or
			in_array($post->post_type, $this->get_config('supported_post_types'))
		) {
			$template = get_post_meta($post_id, '_wp_page_template', true);
			$page_templates = fw_ext_builder_page_templates('layout-builder');
			
			if($post->post_type !== 'page' or empty($page_templates) or in_array($template, $page_templates)) {
				$builder_shortcodes = fw_get_db_post_option($post_id, $this->builder_option_key);
				if (
					!$builder_shortcodes['builder_active'] ||
					!$builder_shortcodes['shortcode_notation']
				) {
					return;
				}

				// remove then add again to avoid infinite loop
				remove_action('fw_save_post_options', array($this, '_admin_action_fw_save_post_options'));
				wp_update_post(array(
					'ID' => $post_id,
					'post_content' => $builder_shortcodes['shortcode_notation']
				));
				add_action('fw_save_post_options', array($this, '_admin_action_fw_save_post_options'), 10, 2);
			}
		}
	}

	/**
	 * @internal
	 */
	public function _theme_filter_prevent_autop($content)
	{
		global $post;

		if (
			post_type_supports($post->post_type, $this->supports_feature_name)
			||
			in_array($post->post_type, $this->get_config('supported_post_types'))
		) {
			$template = get_post_meta($post->ID, '_wp_page_template', true);
			$page_templates = fw_ext_builder_page_templates('layout-builder');
			

			if($post->post_type !== 'page' or empty($page_templates) or in_array($template, $page_templates)) {
	
			if (fw_get_db_post_option($post->ID, $this->builder_option_key .'/builder_active')) {
				/**
				 * Wrap the content in a div to prevent wpautop change/break the html generated by the shortcodes
				 */
				return '<div class="fw-layout-builder-content">'. $content .'</div>';
			}
			}
		}

		return $content;
	}
}
